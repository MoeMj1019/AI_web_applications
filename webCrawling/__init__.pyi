from typing import Any, List, Set, Dict, Tuple, Optional, Iterable
from urllib.parse import urlparse, urljoin
from databaseIndex import DatabaseIndex
from url_index import Url_Index
from requests.models import Response
from bs4 import BeautifulSoup

# Constants
IGNORED_WORDS: Set[str]

# Function type hints
def get_full_urls(base_url: str, urls: List[str]) -> List[str]: ...

def convert_time_units(time_delta: float, from_unit: str, to_unit: str) -> float: ...

def normalize_time_units(time_delta: float, time_unit: str) -> float: ...

class Crawler:
    def __init__(self, *root_urls: str, search_index: Optional[DatabaseIndex] = ..., url_index: Optional[Url_Index] = ..., url_constraints: Optional[Iterable] = ..., response_constraints: Optional[Iterable] = ...) -> None: ...
    def run(self, search_method: str = ..., max_iterations: int = ..., requests_timeout: int = ...) -> None: ...
    def url_requeust_valid(self, url: str) -> bool: ...
    def url_process_valid(self, response: Response) -> bool: ...
    def process_content(self, url: str, response: Response) -> Tuple[List[str], Dict[str, int]]: ...
    def get_urls(self, url: str, html_content: BeautifulSoup) -> List[str]: ...
    def get_info(self, url: str, html_content: BeautifulSoup) -> Dict[str, int]: ...
    def add_to_index(self, url: str, info: Dict[str, int]) -> None: ...
    def validate_constraints(self) -> None: ...

class Constraint:
    def __init__(self) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __str__(self) -> str: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...

class UrlConstraint(Constraint):
    def __init__(self) -> None: ...
    def evaluate(self, url: str) -> Any: ...

class ResponseConstraint(Constraint):
    def __init__(self) -> None: ...
    def evaluate(self, response: Any) -> Any: ...

class ValidStatusCode(ResponseConstraint):
    def __init__(self) -> None: ...
    def evaluate(self, response: Any) -> bool: ...

class ValidContentType(ResponseConstraint):
    def __init__(self) -> None: ...
    def evaluate(self, response: Any) -> bool: ...

class SameDomain(UrlConstraint):
    def __init__(self, domain_urls: List[str] = [], allow_subdomains: bool = False) -> None: ...
    def evaluate(self, url: str) -> bool: ...
    def set_domain_urls(self, domain_urls: List[str]) -> None: ...

class VisitedRecently(UrlConstraint):
    def __init__(self, look_up_index: Optional['Url_Index'] = None, time_delta: int = 60, time_unit: str = "seconds") -> None: ...
    def evaluate(self, url: str) -> bool: ...
    def set_url_index(self, look_up_index: 'Url_Index') -> None: ...
    def get_url_index(self) -> 'Url_Index': ...

class NotVisitedRecently(VisitedRecently):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def evaluate(self, url: str) -> bool: ...

class ValidFileExtension(UrlConstraint):
    def __init__(self, extensions: List[str] = []) -> None: ...
    def evaluate(self, url: str) -> bool: ...


